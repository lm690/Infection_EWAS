#   #   #   #   #   #   #   #   #   # 
#   #   #   #   #   #   #   #   #   #  
######### Introduction ################
#   #   #   #   #   #   #   #   #   #  
#   #   #   #   #   #   #   #   #   # 

# Aim: Epigenme-Wide Association Study of Infection in AD. 
# Run By: Lachlan Ford MacBean
# Date: 13/12/21


# 1. PCA
# 2. Correct Methylation Data
# 3.
# 4.

# Infection in AD Epigenome-Wide Association Study


#   #   #   #   #   #   #   #   #   #  #  #
#   #   #   #   #   #   #   #   #   #  #  #
######### Set Pathways ####################
#   #   #   #   #   #   #   #   #   #  #  #
#   #   #   #   #   #   #   #   #   #  #  #

#Set Working Directory using setwd()
setwd("/mnt/data1/Lachlan/Infection_Immunisation/Inf_EWAS")

#Load required packages
library(fastDummies)

#Load the pheno and beta files
load("/mnt/data1/Lachlan/Infection_Immunisation/QC_ImmInf/InfImm_Betas_Pheno_CET.Rdata")

write.csv(pheno,file="Pheno_Inf.csv")
#Added run information

pheno_run<-read.csv("Pheno_Inf_Run.csv",row.names=1)
#Load back in

rownames(pheno)==rownames(pheno_run)
#TRUE

pheno$Run<-pheno_run$Run

#Remove Southampton Samples
pheno<-pheno[-which(pheno$Brain.Bank=="Southampton"),]
#245 Observations

pheno$Sentrix_ID<-as.numeric(sub("_", "", pheno$Sentrix_ID))

intercept<-rownames(pheno)
##Create list of Sentrix_IDs to keep

betas<-betas[,which(colnames(betas)%in%intercept)]
#245 Variables

pheno$Brain.Bank<-droplevels(pheno$Brain.Bank)
##Although all Southampton samples are removed the level still exists within the factor

save(pheno, betas,file="Inf_Betas_Pheno.RData")
load("Inf_Betas_Pheno.RData")

#Create dummy variables for the different Brain Banks
pheno<-dummy_cols(pheno,select_columns="Brain.Bank")
##dummy_cols() function from fastDummies generates a new dummy column for each level in an existing factor

rownames(pheno)<-pheno$Basename
##Reassign the row names

pheno$Position <- gsub("[RC]", "", pheno$Position)

save(pheno, betas,file="Inf_Betas_Pheno.RData")
load("Inf_Betas_Pheno.RData")


#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #
######### 1. Principal Components Analysis ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #  #

#Load required packages
library(impute)
library(naniar)
library(zoo)
library(Hmisc)
library(corrplot)
library(ggplot2)
library(data.table)

#Impute missing data from the pheno file
colnames(pheno)
pheno.rm<-pheno[,c(1,4,6:10,13:18,21:29)]
##Keep only the required columns
##Sentrix ID, PMD, Braak, Age, Gender, AD, Infection, Infection types, RIN, Cell proportions, Run, Brain bank

pheno.rm$PMD<-as.numeric(levels(pheno.rm$PMD))[pheno.rm$PMD]
##Convert PMD to numeric without loss of information
## One sample with NA

impheno<-sapply(pheno.rm,as.numeric)
##sapply() takes a data frame as input and gives an output in vector or matrix
##Here we are turning all variables to numeric for PCA

impheno<-as.data.frame(impheno)

impheno$PMD[is.na(impheno$PMD)]<-mean(impheno$PMD,na.rm=TRUE)
##Impute mean for sample with missing PMD

rownames(impheno)<-rownames(pheno)
any(is.na(impheno))
#FALSE

#remove NAs from Betas
data.betas<-na.omit(betas)
any(is.na(betas))
#FALSE

#Perform PCA
PCA<-prcomp(t(data.betas))
##Performs principle component analysis
##t() transposes data frame/matrix
PCA.out<-PCA$x
##PCA$rotation gives the eigenvectors of the covariance matrix
##PCA$x gives "rotated" principal components - i.e. data set projected on the principal components

#Merge PCAs with Pheno 
pheno.PCA<-merge(impheno, PCA.out, by="row.names")
rownames(pheno.PCA)<-pheno.PCA$Row.names
pheno.PCA<-subset(pheno.PCA,select=-c(Row.names))
save(PCA,pheno.PCA,file="Inf_PCA.RData")
load("Inf_PCA.RData")

#Check for correlation between PCAs
correlationPCA<-rcorr(as.matrix(pheno.PCA), type="pearson")
##rcorr() from: Hmisc. Computes a matrix of Pearson's rank correlation coefficients for all possible pairs of columns of a matrix

save(correlationPCA,file="correlationPCA.RData")
load("correlationPCA.RData")

#Look at PCA summary
PCAsummary<-summary(PCA)
View(PCAsummary$importance)

#Visualise importance of first [30] PCs
png("Inf_screeplotPCA.png")
screeplot(PCA, type = "l", npcs = 30, main = "Screeplot of the first 30 PCs")
abline(h = 5, col="red", lty=5)
legend("topright", legend=c("Eigenvalue = 5"),
       col=c("red"), lty=5, cex=0.6)
dev.off()
##screeplot() plots the variances against the number of the principal component

##Elbow (cut-off) at PC 20

png("Inf_cumsumPCA.png")
cumpro <- cumsum(PCA$sdev^2 / sum(PCA$sdev^2))
plot(cumpro[0:30], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
abline(v = 20, col="blue", lty=5)
abline(h =0.551990, col="blue", lty=5)
legend("topleft", legend=c("Cut-off @ PC20"),
       col=c("blue"), lty=5, cex=0.6)
dev.off()
##cumsum() returns a vector whose elements are the cumulative sums of the elements of the argument

png("Inf_PearsonsCor.png")
corrplot(correlationPCA$r[,1:31],type="upper", method="color", tl.pos="td", tl.cex=0.5, tl.col="black")
dev.off()
##corrplot() from: corrplot - we can use this plot to visualise which covariates correlate with the first few principal components

#Sentrix_ID correlates heavily with PC4 and PC5 so there may be batch effect present

Run<-pheno.PCA$Run
Sentrix_ID<-pheno.PCA$Sentrix_ID

#Plot Sentrix_ID and PCs 4,5
png("Sentrix_ID_PC.png")
e<-ggplot(pheno.PCA, aes(PC4,PC5))
e+geom_point(aes(color=factor(Sentrix_ID))) +
stat_ellipse(type="norm")
dev.off()

#Plot Run and PCs 4,5
png("Run_PC.png")
e<-ggplot(pheno.PCA, aes(PC4,PC5))
e+geom_point(aes(color=factor(Run))) +
  stat_ellipse(type="norm")
dev.off()

#Plot Run and PCs 5,6
png("Run_PC_5_6.png")
e<-ggplot(pheno.PCA, aes(PC5,PC6))
e+geom_point(aes(color=factor(Run))) +
  stat_ellipse(type="norm")
dev.off()

#Samples from runs: 205767050089, 205767060036, 205715840157, 205715840149 do not cluster with the other samples - Runs 4 and 5

save(PCA,pheno.PCA,file="Inf_PCA.RData")
load("Inf_PCA.RData")

#Create dummy variables for the different runs
pheno.PCA<-dummy_cols(pheno,select_columns="Run")

save(PCA,pheno.PCA,file="Inf_PCA.RData")
load("Inf_PCA.RData")

#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #
######### 2. Correct Methylation Data ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #

#Load required packages
library(parallel)

load("Inf_PCA.RData")
load("Inf_Betas_Pheno.RData")

#Correct data by regressing out the effects of Age, Sex, Run, NeuN+, NeuN-, Sentrix ID (correlated with first few PCAs)
resid<-function(row,Sex,Age,DoubleN,NeuNP,Sox10P,Run_4,Run_5){
  fit<-try(
    lm(row~Sex+Age+DoubleN+NeuNP+Sox10P+Run_4+Run_5),
    silent=TRUE
  )
  if(inherits(fit,'try-error')) return(rep(NA,length(Sex)))
  fit$residuals
}
##Here we create a function that performs a linear regression analysis for each row of the beta frame
##Rows represent different CpG sites on the EPIC array
##We then create a data frame of the residuals (the error between predicted and observed value)
##This means the "leftover, unexplained" variance that accounts for our model of AD and Infection

cl<-makeCluster(32)

dat.reg<-{
  Sex<-factor(pheno.PCA$Gender)
  Run<-factor(pheno.PCA$Run)
  Age<-pheno.PCA$Age
  DoubleN<-pheno.PCA$DoubleN
  NeuNP<-pheno.PCA$NeuNP
  Sox10P<-pheno.PCA$Sox10P
  Run_4<-factor(pheno.PCA$Run_4)
  Run_5<-factor(pheno.PCA$Run_5)
  t(parApply(cl,betas,1,resid,Sex,Age,DoubleN,NeuNP,Sox10P,Run_4,Run_5))
}
head(dat.reg[1:5,1:5])
save(dat.reg,file="Inf_dat.reg.RData")
load("Inf_dat.reg.RData")


#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #
######### 3. Surrogate Variable Analysis ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #  #  #

# Surrogate Variable Analysis for identification of unknown batch effects

#Load required packages
library(sva)

load("Inf_PCA.RData")
load("Inf_Betas_Pheno.RData")
load("Inf_dat.reg.RData")

#Create model matrices
mod<-model.matrix( ~ factor(AD)*factor(Infection),data=pheno.PCA)
##Creates a design matrix using the different levels of each factor

mod0<-model.matrix(~1,data=pheno.PCA)
##This is the null model for comparison (i.e. there is no effect on methylation)

mydf<-na.omit(dat.reg)
##Just to make sure there are no pesky NAs

#Perform SVA
sva<-sva::sva(dat = as.matrix(mydf), mod = mod, mod0 = mod0)
##Perform Surrogate Variable Analysis and compare the fitted model to the null model
#No. significant = 14

save(sva, file="Inf_sva.regressed.Rdata")
load("Inf_sva.regressed.Rdata")


#   #   #   #   #   #   #   #   #   #  #  #   #   #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #
######### 4. Linear Model Design ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #
#   #   #   #   #   #   #   #   #   #  #  #   #   #  #

# Linear regression to identify differentially methylated positions

#Load required packages
library(QCEWAS)
library(Haplin)
library(parallel)

load("Inf_PCA.RData")
load("Inf_Betas_Pheno.RData")
load("Inf_dat.reg.RData")
load("Inf_sva.regressed.Rdata")

#Create environment objects for each covariate, including first 5 significant surrogate variables
AD<-factor(pheno.PCA$AD)
Infection<-factor(pheno.PCA$Infection)
SV1<-sva$sv[,1]
SV2<-sva$sv[,2]
SV3<-sva$sv[,3]
SV4<-sva$sv[,4]
SV5<-sva$sv[,5]

#Test the model on a single site
res<-lm(dat.reg["cg00000029",]~AD*Infection)
aov<-aov(lm(dat.reg["cg00000029",]~AD*Infection))
summary(aov)[[1]][["Pr(>F)"]][1]
TukeyHSD(aov)$'Infection'[,4]
TukeyHSD(aov)$'AD'[,4]
TukeyHSD(aov)$'AD:Infection'
testT<-cbind(summary(aov)[[1]][["Pr(>F)"]][1],summary(aov)[[1]][["Pr(>F)"]][2],summary(aov)[[1]][["Pr(>F)"]][3],TukeyHSD(aov)$'Infection'[,4],TukeyHSD(aov)$'AD'[,4],TukeyHSD(aov)$'AD:Infection'[1,4],TukeyHSD(aov)$'AD:Infection'[2,4],TukeyHSD(aov)$'AD:Infection'[3,4],TukeyHSD(aov)$'AD:Infection'[4,4],TukeyHSD(aov)$'AD:Infection'[5,4],TukeyHSD(aov)$'AD:Infection'[6,4])
test<-cbind(coef(summary(res))[2,1], coef(summary(res))[2,2], coef(summary(res))[2,4], coef(summary(res))[3,1], coef(summary(res))[3,2], coef(summary(res))[3,4],coef(summary(res))[4,1],coef(summary(res))[4,2],coef(summary(res))[4,4])
##We pull the P value for AD, Infection, and the interaction term (AD:Infection) as well as the estimate and Std. Error for each test

#Create function and run the model across all sites
lm_fun <- function(dat.reg, AD, Infection){
  res<-lm(dat.reg ~ AD * Infection)
  aov<-aov(res)
  return(cbind(summary(aov)[[1]][["Pr(>F)"]][1],summary(aov)[[1]][["Pr(>F)"]][2],summary(aov)[[1]][["Pr(>F)"]][3],TukeyHSD(aov)$'Infection'[,4],TukeyHSD(aov)$'AD'[,4],TukeyHSD(aov)$'AD:Infection'[1,4],TukeyHSD(aov)$'AD:Infection'[2,4],TukeyHSD(aov)$'AD:Infection'[3,4],TukeyHSD(aov)$'AD:Infection'[4,4],TukeyHSD(aov)$'AD:Infection'[5,4],TukeyHSD(aov)$'AD:Infection'[6,4]))
         }

cl<- makeCluster(32)

ADTest<-t(parApply(cl,dat.reg,1,lm_fun,AD,Infection))

stopCluster(cl)

#Rename columns
colnames(ADTest)<-c("AD_Est","AD_Std","AD","Inf_Est","Inf_Std","Infection","Int_Est","Int_Std","Interaction", "R")

ADTest<-as.data.frame(ADTest)

save(ADTest,file="ADTest.RData")

load("ADTest.RData")

#QQ plots and lambda
#We can adjust the number of surrogate variables in the model until the lambda reaches ~1
P_lambda(ADTest$AD)
#[1] 1.178686
P_lambda(ADTest$Infection)
#[1] 0.9356995
P_lambda(ADTest$Interaction)
#[1] 1.027171
##The lambda value represents the inflation of the p-values compared to a normal distribution
##So a lambda of 1 represents a normally distributed range of p-values

#Quantile-Quantile plots
png("ADTest_QQ.png")
par(mfrow=c(2,2))
pQQ(ADTest$AD)
pQQ(ADTest$Infection)
pQQ(ADTest$Interaction)
dev.off()
##QQ plots visualise the distribution of p-values compared to a normal distribution
##pQQ() from: haplin is an easy way to visualise this


#   #   #   #   #   #   #   #   #   #  #  #   #   #
#   #   #   #   #   #   #   #   #   #  #  #   #   #
######### 4. Data Visualisation ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #
#   #   #   #   #   #   #   #   #   #  #  #   #   #

# Plot significance of differential methylation across all sites

#Load required packages
library(qqman)

#Load EPIC manifest to collect gene information and bind with model coefficients
epicManifest<-read.csv("/mnt/data1/EPIC_reference/MethylationEPIC_v-1-0_B2.csv", skip = 7)
epicManifest<-epicManifest[match(rownames(ADTest), epicManifest$Name),]
ADTest<-cbind(ADTest, epicManifest[,c("CHR", "MAPINFO", "UCSC_RefGene_Name", "UCSC_RefGene_Group", "Relation_to_UCSC_CpG_Island", "Regulatory_Feature_Name", "Regulatory_Feature_Group", "DNase_Hypersensitivity_NAME", "OpenChromatin_NAME", "TFBS_Evidence_Count", "Methyl450_Loci", "SNP_ID", "SNP_DISTANCE", "SNP_MinorAlleleFrequency")])
##This can be edited to include additional columns or exclude as required

save(ADTest,file="ADTest_Manifest_1.0.RData")
load("ADTest_Manifest_1.0.RData")

#Recode X and Y to numeric
ADTest$CHR<-as.character(ADTest$CHR)
ADTest$CHR[which(ADTest$CHR == "X")]<-23
ADTest$CHR[which(ADTest$CHR == "Y")]<-24
ADTest$CHR<-as.numeric(ADTest$CHR)
ADTest<-ADTest[which(ADTest$CHR != ""),]

#Manhattan plot of effect of AD diagnosis on differential methylation across the genome, correcting for Infection (no interaction)
ADTest$SNP<-ADTest$UCSC_RefGene_Name
png("Manhattan_AD.png" ,width=2400, height=1500, res=300)
bonfp<-0.05/nrow(dat.reg)
par(mfrow=c(1,1))
manhattan(ADTest, p = "AD", bp = "MAPINFO", chr = "CHR", snp="SNP", ylim = c(1,8), col = c("grey", "skyblue"), suggestiveline = -log10(bonfp), genomewideline = F, annotatePval = 0.001)
dev.off()
##manhattan() from: qqman plots p values against genomic location for each probe site

#Manhattan plot of effect of Infection diagnosis on differential merthylation across the genome, correcting for AD (no interaction)
png("Manhattan_Inf.png" ,width=2400, height=1500, res=300)
bonfp<-0.05/nrow(dat.reg)
par(mfrow=c(1,1))
manhattan(ADTest, p = "Infection", bp = "MAPINFO", chr = "CHR", snp="SNP", ylim = c(1,8), col = c("grey", "skyblue"), suggestiveline = -log10(bonfp), genomewideline = F, annotatePval = 0.001)
dev.off()

#Manhattan plot of the interaction effect between AD and Infection on methylation across the genome
png("Manhattan_Interaction.png" ,width=2400, height=1500, res=300)
bonfp<-0.05/nrow(dat.reg)
par(mfrow=c(1,1))
manhattan(ADTest, p = "Interaction", bp = "MAPINFO", chr = "CHR", snp="SNP", ylim = c(1,8), col = c("grey", "skyblue"), suggestiveline = -log10(bonfp), genomewideline = F, annotatePval = 0.001)
dev.off()


#   #   #   #   #   #   #   #   #   #  #  #   #
#   #   #   #   #   #   #   #   #   #  #  #   #
######### 5. DMR Analysis ####################
#   #   #   #   #   #   #   #   #   #  #  #   #
#   #   #   #   #   #   #   #   #   #  #  #   #

#Identification of differentially methylated regions (DMR) using COMB-P

#Prepare the file
Intprobes<-merge(dat.reg,ADTest,by="row.names")
##Merge the p values with probe info

colnames(Intprobes)
##Check which columns are required

rownames(Intprobes)<-Intprobes[,1] 
##Make rownames probe ID again

Intcomb<-Intprobes[,c(258,259,259,256)]
##Select columns with CHR, MAPINFO (x 2) and pvalues (interaction)

Intcomb[,1]<-paste("chr",Intcomb[,1],sep="")
##Add "chr" character string to the chromosome column

Intsort<-Intcomb[order(Intcomb[,1],Intcomb[,2]),]
##Order the data by genomic position

colnames(Intsort)<-c("#chrom","start","end","pvalue")
write.table(Intsort,"Int_comb.bed", col.names=TRUE,row.names=FALSE, sep="\t", quote = FALSE) 
##Write bed file for comb-p analysis

#COMB-P is performed using Python
#The following function is input to the console:
#comb-p pipeline -c 4 --dist 500 --seed 1e-2 -p name --anno hg19  /mnt/data1/Lachlan/Infection_Immunisation/Inf_EWAS/Int_comb.bed

#Load the list of DMRs from COMB-P
DMRs<-read.csv("Interaction.anno.hg19.csv")

#Visualise the DMRs
#CMTM3
source("/mnt/data1/Lachlan/Infection_Immunisation/Inf_EWAS/Miniman_Function.R")
##Load the miniman() function

range_GNAS<-subset(ADTest, MAPINFO >= 57463900
 & MAPINFO <= 57464002)
##Create a new model output with only the probes within the DMR of interest

bonfp<-0.05/nrow(range_GNAS)

png("Inf_AD_Miniman_GNAS.png")
miniman(data = ADTest, chr = 20, range = 57463900:57464002	, result = "Interaction", 
        pad = 20000, ESlevel = 0.01, ESdat = 'Int_Est', negcol = "red",
        poscol = "forestgreen", cexgene = 0.6, multiply = nrow(range_GNAS), cpgcol ="forestgreen", genelines = 5, sigline = TRUE, siglinecol = "blue", siglevel = bonfp)
dev.off()
##miniman() plots p-values against gene tracks. It also uses estimate information form the model to colour probes based on whether the site is methylated or unmethylated as a result of the phenotype


#   #   #   #   #   #   #   #   #   #  #  #   #   #   #
#   #   #   #   #   #   #   #   #   #  #  #   #   #   #
######### 6. Visualisation of Top DMPs ####################
#   #   #   #   #   #   #   #   #   #  #  #   #   #   #
#   #   #   #   #   #   #   #   #   #  #  #   #   #   #

#Boxplots

#Load required packages
library(ggplot2)
library(ggsignif)
library(reshape2)

order<-ADTest[order(ADTest$Interaction),]
order[1,]
##Order the results by most significant site

dat<-melt(betas['cg06202582',])
##melt() reorganises the data values into a long data frame format
##We keep the most significantly differentially methylated position

Group<-interaction(pheno.PCA$AD,pheno.PCA$Infection)
##interaction() generates a new factor with consideration to the input variables

pheno.PCA$Group<-Group
#~Create new column

png("cg06202582_Box_Stat.png")
e <- ggplot(dat,aes(factor(pheno.PCA$Group), value*100))
e+geom_boxplot(aes(color=factor(pheno.PCA$Group)))+
  scale_y_continuous()+
  labs(y = 'Methylation (%)', x = 'Clinical Diagnosis')+
  theme_linedraw()+
  theme(legend.position="none",plot.title=element_text(hjust = 0.5, size=14,face="bold"))+
  ggtitle('cg05349363')+
  stat_summary(fun=mean, geom="point", shape=23, size=4)+
  scale_color_manual(values=c("#5079ff", "#ff7f50", "#ff50cf","#d0ff50"))
dev.off()
